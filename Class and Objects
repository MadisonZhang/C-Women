## 1.  Polygon Class -  Creating a Class, Inheritance, Calling Methods

class Sides:
    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c

class Triangle(Sides):
    def area(self):
        s = (self.a + self.b + self.c) / 2
        return (s * (s - self.a) * (s - self.b) * (s - self.c)) ** 0.5

# Usage
a = int(input('Enter side 1 of the triangle in cm: '))
b = int(input('Enter side 2 of the triangle in cm: '))
c = int(input('Enter side 3 of the triangle in cm: '))
t = Triangle(a, b, c)
print(f"The area of your triangle is: {t.area()} cm2.")


##2. User Profile Class
##2.1 Creating the User Class
class User:
    def __init__(self, first_name, last_name, username, email, location):
        self.first_name = first_name.title()
        self.last_name = last_name.title()
        self.username = username
        self.email = email
        self.location = location.title()

    def describe_user(self):
        return f"{self.first_name} {self.last_name}\nUsername: {self.username}\nE-mail: {self.email}\nLocation: {self.location}"

    def greet_user(self):
        return f"Welcome back, {self.username}!"

##2.2 Class Inheritance - LoggedInUser
class LoggedInUser(User):
    def __init__(self, first_name, last_name, username, email, location, pw, log_in_attempts):
        super().__init__(first_name, last_name, username, email, location)
        self.pw = pw
        self.log_in_attempts = log_in_attempts

    def increment_login_attempts(self):
        self.log_in_attempts += 1
        return self.log_in_attempts

    def reset_login_attempts(self):
        self.log_in_attempts = 0
        return self.log_in_attempts

    def class_method_example(self):
        return f"This is a class method."

    class_variable = "This is a class variable."

##2.3 Usage
# Creating a User instance
user1 = User('Eric', 'Matthes', 'e_matthes', 'e_matthes@example.com', 'Alaska')
print(user1.describe_user())
print(user1.greet_user())

# Creating a LoggedInUser instance
loggedin_user = LoggedInUser('Willie', 'Burger', 'willieburger', 'wb@example.com', 'Ohio', '1234', 0)
print(loggedin_user.describe_user())
print(loggedin_user.greet_user())

# Login attempts example
login_attempts = 0
while login_attempts < 3:
    pw_input = input('Enter your password to log in: ')
    if pw_input != loggedin_user.pw:
        login_attempts = loggedin_user.increment_login_attempts()
        print(f"Incorrect password. {loggedin_user.username}, your total log in attempts: {login_attempts} and you have {3 - login_attempts} attempts left.")
    elif login_attempts == 3:
        print(f"Forget your password, {loggedin_user.username}?\nYour account is temporarily locked and your log in attempts are: {loggedin_user.reset_login_attempts()}")
    elif pw_input == loggedin_user.p


##3. Restaurant Class
##3.1 Creating the Restaurant Class
class Restaurant:
    def __init__(self, name, cuisine_type):
        self.name = name
        self.cuisine_type = cuisine_type

    def describe_restaurant(self):
        return f"Restaurant: {self.name}\nCuisine Type: {self.cuisine_type}"

    def open_restaurant(self):
        return f"{self.name} is now open!"
##3.2 Usage
# Creating a Restaurant instance
restaurant1 = Restaurant('The Italian Kitchen', 'Italian')
print(restaurant1.describe_restaurant())
print(restaurant1.open_restaurant())
print('-------------------')

# Creating another Restaurant instance
restaurant2 = Restaurant('Spice Bazaar', 'Indian')
print(restaurant2.describe_restaurant())
print(restaurant2.open_restaurant())
print('-------------------')

##3.3 Inheritance - parent & child class
class operations(Restaurant):
  def __init__(self,name, cuisine_type,number_served):
    super().__init__(name, cuisine_type)
    self.number_served=number_served
  def set_number_served(self):
    self.number_served=int(input("Enter number of customers served:"))
    return self.number_served
  def increment_number_served(self):
    self.increment_number_served=int(input("Enter number of customers served in a day of business:"))
    self.number_served += self.increment_number_served
    return self.number_served
restaurant3 = operations('Hot finger', 'Mexican',0)
print(restaurant3.describe_restaurant())
print(restaurant3.open_restaurant())
print(f"{restaurant3.set_number_served()} customers have been served.")
print(f"{restaurant3.increment_number_served()} customers have been served in a day of business.")
print('-------------------')

#4. Planet Class - Creating a Class, Calling Methods
class Planet:
    def __init__(self, diameter, color):
        self.diameter = diameter
        self.color = color
    
    def getDiameter(self):
        return self.diameter
    
    def getArea(self):
        return 3.14 * self.diameter


#5. Employee remuneration Class - Creating a Class, Calling methods, Conditions
class Employee:
  def __init__(self,emp_name,emp_id,emp_salary,emp_depart):
    self.emp_id=emp_id
    self.emp_name=emp_name
    self.emp_salary=emp_salary
    self.emp_depart=emp_depart.upper()
  def assign_department(self,emp_depart):
    self.emp_depart=emp_depart
  def calculate_salary(self, salary, hours_worked):
        overtime = 0
        if hours_worked > 50:
            overtime = hours_worked - 50
        self.emp_salary = self.emp_salary + (overtime * (self.emp_salary / 50))
  def print_employee_details(self):
        print("\nName: ", self.emp_name)
        print("ID: ", self.emp_id)
        print("Salary: ", self.emp_salary)
        print("Department: ", self.emp_depart)
        print("----------------------")

employee1 = Employee("ADAMS", "E7876", 50000, "ACCOUNTING")
employee2 = Employee("JONES", "E7499", 45000, "RESEARCH")
employee3 = Employee("MARTIN", "E7900", 50000, "SALES")
employee4 = Employee("SMITH", "E7698", 55000, "OPERATIONS")

print("Original Employee Details:")
employee1.print_employee_details()
employee2.print_employee_details()
employee3.print_employee_details()
employee4.print_employee_details()

# Change the departments of employee1 and employee4
employee1.assign_department('Operation')
employee1.assign_department('SALES')

# Now calculate the overtime of the employees who are eligible:
employee2.calculate_salary(45000, 52)
employee4.calculate_salary(45000, 60)

print("Updated Employee Details:")
employee1.print_employee_details()
employee2.print_employee_details()
employee3.print_employee_details()
employee4.print_employee_details()
